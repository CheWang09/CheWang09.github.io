---
layout:     post
title:      Linear Regression
author:     CHENEY WANG
tags: 		MachineLearning Review
header-img:  "img/manhanton.jpg"
subtitle:  	Linear Regression Review
category:  project
---
<!-- Start Writing Below in Markdown -->

# **线性回归回顾**
<br >
## What is linear regression:
Simple linear regression is a statistical method that allows us to summarize and study relationships between two continuous (quantitative) variables  or multivariables.

![linear regression picture](/img/Linear_regression.png)
Above is the plot of linear regression.
## Mathmatical Function of Linear Regression:
### Hypothesis Function:
$$
\begin{align} 
\text{Hypothesis:} \quad H_w(X) = W_1+W_1X_2+ ... + W_nX_n
\end{align}
$$
<br > Linear regression 的优化方式是最小化Hypothesis函数，而最小化Hypothesis函数自然也就引申到了最小二乘法的损失函数。
最小二乘法也就是我们日常所说的最小平方差，一个是从图像方面可以推导，即每个点到回归线的距离的平方值。 另外对于贝叶斯学派来说，我们通过条件概率推导，也一样可以得到损失函数是最小二乘法。

### Loss function of Linear Regression:
$$
\begin{align}
J_i(θ) = \frac{1}{2m}\sum_{i=1}^{m}(h_θ(x^{i})-y^{i})^{2}
\end{align}
$$

![cost function graph](\img\LR_cost_function.png)

所以对于线性回归的loss function, 这是一个bowl-shaped function. 所以通过gradient descent比较容易收敛到得到$J_{min}(W)$。

## Regularization：
Regularization is a very important technique in machine learning to prevent overfitting. Mathematically speaking, it adds a regularization term in order to prevent the coefficients to fit so perfectly to overfit. The difference between the L1 and L2 is just that L2 is the sum of the square of the weights, while L1 is just the sum of the weights. As follows:
### L1 Regularization:
Linear Regression with L1 regularization also named Lasso Regression.
$$ 
\begin{align}
& L1-norm = λ \sum_{i=1}^{m}|W|
\end{align}
$$

### L2 Regularization:
Linear Regression with L2 regularization named Ridge Regression.
$$ 
\begin{align}
& L2-norm = \frac{λ}{2} \sum_{i=1}^{m}(W)^{2}
\end{align}
$$
And *$\frac{1}{2}$* here is to simply computation. 

### Gradient descent:
Gradient descent is a method like climbers look down from hill peek , and go down step by step. Of course, the step size could be tuned by people.
Repeat until convergence:
$$
\begin{align}
& θ_j = : θ_j - α \frac{\partial J(θ)}{\partial (θ_{j})} \text { $\alpha$ is learning rate} \\
& θ \in \mathbb{R} \\
&
\end{align}
$$
#### Learning rate a
If $\alpha $ is small, so it would be a tiny tiny baby step.
If $\alpha $ is large, it would be a large step which may fail to converage.

#### Gradient descent with regularization
$$
\begin{align}
J_i(θ) = \frac{1}{2m} [ \sum_{i=1}^{m}(h_θ(x^{i})-y^{i})^{2} + \lambda \sum_{i=1}^{n} \theta^{2} 
\end{align}
$$

Cost function like this, then derivate of cost function :
$$
\begin{align}
\frac{\partial J(θ)}{\partial \theta_j} & = (y \frac{1}{g(\theta^{T}x)} - (1-y) \frac{1}{1-g(\theta^{T}x)} ) \frac{ \partial g(\theta^{T}x)}{\partial \theta_j} \\
& = (y \frac{1}{g(\theta^{T}x)} - (1-y) \frac{1}{1-g(\theta^{T}x)} )g(\theta^{T}x)(1- g(\theta^{T}x)) \frac{\partial \theta^{T}x}{\theta_j} \\
& = (y(1-g(\theta^{T}x)) - (1-y)g(\theta^{T}x))x_j \\
& = (y - h_\theta(x)) x_j
\end{align}
$$

Then gradient descent will repeat :
$$
\begin{align}
\theta_0 & = \theta_0 - \alpha \frac{1}{m} \sum_{1}^{m}(h_\theta(x))
\end{align}
$$






















